" highlight colorcolumn guibg=#303030 "messes up toggle wrap
set autowrite
set autowriteall
let g:ale_fixers = {
\   'javascript': ['prettier', 'eslint'],
\   'typescript': ['prettier', 'eslint'],
\   'typescriptreact': ['prettier', 'eslint'],
\   'javascriptreact': ['prettier', 'eslint'],
\   'c':['clang-format'],
\   'python':['autopep8'],
\   'tex':['textlint']
\}

nnoremap <Tab> %
  if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " unicode symbols
  let g:airline_left_sep = '¬ª'
  let g:airline_left_sep = '‚ñ∂'
  let g:airline_right_sep = '¬´'
  let g:airline_right_sep = '‚óÄ'
  let g:airline_symbols.colnr = ' „èá:'
  let g:airline_symbols.colnr = ' ‚ÑÖ:'
  let g:airline_symbols.crypt = 'üîí'
  let g:airline_symbols.linenr = '‚ò∞'
  let g:airline_symbols.linenr = ' ‚êä:'
  let g:airline_symbols.linenr = ' ‚ê§:'
  let g:airline_symbols.linenr = '¬∂'
  let g:airline_symbols.maxlinenr = ''
  let g:airline_symbols.maxlinenr = '„èë'
  let g:airline_symbols.branch = '‚éá'
  let g:airline_symbols.paste = 'œÅ'
  let g:airline_symbols.paste = '√û'
  let g:airline_symbols.paste = '‚à•'
  let g:airline_symbols.spell = 'Íû®'
  let g:airline_symbols.notexists = '…Ü'
  let g:airline_symbols.whitespace = 'Œû'

  " powerline symbols
  let g:airline_left_sep = 'ÓÇ∞'
  let g:airline_left_alt_sep = 'ÓÇ±'
  let g:airline_right_sep = 'ÓÇ≤'
  let g:airline_right_alt_sep = 'ÓÇ≥'
  let g:airline_symbols.branch = 'ÓÇ†'
  let g:airline_symbols.colnr = ' ÓÇ£:'
  let g:airline_symbols.readonly = 'ÓÇ¢'
  let g:airline_symbols.linenr = ' ÓÇ°:'
  let g:airline_symbols.maxlinenr = '‚ò∞ '
  let g:airline_symbols.dirty='‚ö°'

  " old vim-powerline symbols
  " let g:airline_left_sep = '‚ÆÄ'
  " let g:airline_left_alt_sep = '‚ÆÅ'
  " let g:airline_right_sep = '‚ÆÇ'
  " let g:airline_right_alt_sep = '‚ÆÉ'
  " let g:airline_symbols.branch = '‚≠†'
  " let g:airline_symbols.readonly = '‚≠§'
  " let g:airline_symbols.linenr = '‚≠°'

let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#scrollbar#enabled = 1
let g:airline_theme = 'papercolor'
let g:airline_section_z = '%p%%%#__accent_bold#%{g:airline_symbols.linenr}%l%#__restore__#%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__#%#__accent_bold#%{g:airline_symbols.colnr}%v%#__restore__#'
let g:airline_section_z = '%p%%%#__accent_bold#%{g:airline_symbols.linenr}%l%#__restore__#%#__accent_bold#/%L%{g:airline_symbols.maxlinenr}%#__restore__#'

let g:elite_mode = 1                     " Set arrow-keys to window resize
let g:tabline_plugin_enable = 0          " Disable built-in tabline

" With this function you can reuse the same terminal in neovim.
" You can toggle the terminal and also send a command to the same terminal.

let s:monkey_terminal_window = -1
let s:monkey_terminal_buffer = -1
let s:monkey_terminal_job_id = -1

function! MonkeyTerminalOpen()
  " Check if buffer exists, if not create a window and a buffer
  if !bufexists(s:monkey_terminal_buffer)
    " Creates a window call monkey_terminal
    new monkey_terminal
    " Moves to the window the right the current one
    wincmd J
    let s:monkey_terminal_job_id = termopen($SHELL, { 'detach': 1 })

     " Change the name of the buffer to "Terminal 1"
     silent file Terminal\ 1
     " Gets the id of the terminal window
     let s:monkey_terminal_window = win_getid()
     let s:monkey_terminal_buffer = bufnr('%')

    " The buffer of the terminal won't appear in the list of the buffers
    " when calling :buffers command
    set nobuflisted
  else
    if !win_gotoid(s:monkey_terminal_window)
    sp
    " Moves to the window below the current one
    wincmd J
    buffer Terminal\ 1
     " Gets the id of the terminal window
     let s:monkey_terminal_window = win_getid()
    endif
  endif
endfunction

function! MonkeyTerminalToggle()
  if win_gotoid(s:monkey_terminal_window)
    call MonkeyTerminalClose()
  else
    call MonkeyTerminalOpen()
  endif
endfunction

function! MonkeyTerminalClose()
  if win_gotoid(s:monkey_terminal_window)
    " close the current window
    hide
  endif
endfunction

function! MonkeyTerminalExec(cmd)
  if !win_gotoid(s:monkey_terminal_window)
    call MonkeyTerminalOpen()
  endif

  " clear current input
  call jobsend(s:monkey_terminal_job_id, "clear\n")

  " run cmd
  call jobsend(s:monkey_terminal_job_id, a:cmd . "\n")
  normal! G
  wincmd p
endfunction

"stop term from interpreting C-j
let g:BASH_Ctrl_j = 'off'
" With this maps you can now toggle the terminal
nnoremap <F7> :call MonkeyTerminalToggle()<cr>i
nnoremap <C-j> :call MonkeyTerminalToggle()<cr>i
tnoremap <F7> <C-\><C-n>:call MonkeyTerminalToggle()<cr>
tnoremap <C-j> <C-\><C-n>:call MonkeyTerminalToggle()<cr>

" This an example on how specify command with different types of files.
    augroup go
        autocmd!
        autocmd BufRead,BufNewFile *.py set filetype=python
        autocmd FileType python nnoremap <F5> :call MonkeyTerminalExec('py ' . expand('%'))<cr>
    augroup END
